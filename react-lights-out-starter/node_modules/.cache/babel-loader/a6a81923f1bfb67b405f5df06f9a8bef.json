{"ast":null,"code":"import _slicedToArray from \"/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport Rules from \"./Rules\";\nimport Footer from \"./Footer\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard(),\n      gameStarted: false\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNew = _this.handleNew.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.resetGame();\n    }\n  }, {\n    key: \"handleNew\",\n    value: function handleNew() {\n      this.newGame();\n    }\n  }, {\n    key: \"newGame\",\n    value: function newGame() {\n      var _this2 = this;\n\n      this.setState(function (st) {\n        return {\n          hasWon: false,\n          board: _this2.createBoard(),\n          gameStarted: true\n        };\n      });\n      var audio = new Audio(\"./game-bg-new.mp3\");\n\n      var start = function start() {\n        audio.play();\n      };\n\n      start();\n    }\n  }, {\n    key: \"resetGame\",\n    value: function resetGame() {\n      var _this3 = this;\n\n      this.setState(function (st) {\n        return {\n          hasWon: false,\n          board: _this3.createBoard(),\n          gameStarted: true\n        };\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"game-winner-wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"Board-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"Big-Winner\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }\n        }, \"You\"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"neon-blue\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }\n        }, \"Win!!!\"))), /*#__PURE__*/React.createElement(\"img\", {\n          className: \"win-img\",\n          src: \"https://media.giphy.com/media/o75ajIFH0QnQC3nCeD/giphy.gif\",\n          alt: \"the office erin excited Big Win image\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"play-again-btn-wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          onClick: this.handleClick,\n          className: \"play-again-btn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          id: \"play-btn\",\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }\n        }, \"Play\"), /*#__PURE__*/React.createElement(\"span\", {\n          id: \"play-btn\",\n          className: \"neon-blue play-btn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }\n        }, \"Again?\"))));\n      }\n\n      if (!this.state.gameStarted) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"game-winner-wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"Board-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"Winner\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 11\n          }\n        }, \"Ready\"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"neon-blue\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 11\n          }\n        }, \"To Play?\"))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"play-again-btn-wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          onClick: this.handleNew,\n          className: \"play-again-btn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          id: \"play-btn\",\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 11\n          }\n        }, \"Click\"), /*#__PURE__*/React.createElement(\"span\", {\n          id: \"play-btn\",\n          className: \"neon-blue play-btn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 11\n          }\n        }, \"Here\"))));\n      } else {\n        var tblBoard = [];\n\n        for (var y = 0; y < this.props.nrows; y++) {\n          var row = [];\n\n          var _loop = function _loop(x) {\n            var coord = \"\".concat(y, \"-\").concat(x);\n            row.push( /*#__PURE__*/React.createElement(Cell, {\n              key: coord,\n              isLit: _this4.state.board[y][x],\n              flipCellsAroundMe: function flipCellsAroundMe() {\n                return _this4.flipCellsAround(coord);\n              },\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 9\n              }\n            }));\n          };\n\n          for (var x = 0; x < this.props.ncols; x++) {\n            _loop(x);\n          }\n\n          tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n            key: y,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 21\n            }\n          }, row));\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"Board-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 7\n          }\n        }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"neon-blue\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 7\n          }\n        }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n          className: \"Board\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"tbody\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }\n        }, tblBoard)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"play-again-btn-wrapper\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          onClick: this.handleClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          id: \"play-btn\",\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }\n        }, \"New\"), /*#__PURE__*/React.createElement(\"span\", {\n          id: \"play-btn\",\n          className: \"neon-blue play-btn\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }\n        }, \"Board?\"))), /*#__PURE__*/React.createElement(Rules, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(Footer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 7\n          }\n        })); // if the game is won, just show a winning msg & render nothing else\n        // TODO\n        // make table board\n        // TODO\n      }\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.35\n};\nexport default Board;","map":{"version":3,"sources":["/Users/mcooper/Documents/GitHub/ModernReactBootcamp-Part2/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Rules","Footer","Board","props","state","hasWon","board","createBoard","gameStarted","handleClick","bind","handleNew","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","resetGame","newGame","st","audio","Audio","start","play","tblBoard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["\n\nimport React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport Rules from \"./Rules\"\nimport Footer from \"./Footer\"\n\n\nimport './Board.css';\n\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.35\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n      gameStarted: false,\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNew = this.handleNew.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y= 0; y < this.props.nrows; y++){\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board, hasWon});\n  }\n\n  handleClick(){\n    this.resetGame();\n    \n  }\n\n  handleNew(){\n    this.newGame();\n    \n  }\n\n\n  newGame(){\n    this.setState(st => ({\n      hasWon: false,\n      board: this.createBoard(),\n      gameStarted: true\n\n    }));\n    let audio = new Audio(\"./game-bg-new.mp3\")\n      const start = () => {\n          audio.play()\n        }\n        start();\n  }\n\n  \n\n  resetGame(){\n    this.setState(st => ({\n      hasWon: false,\n      board: this.createBoard(),\n      gameStarted: true\n\n    }));\n  }\n\n  \n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon){\n      return (\n    <div className=\"game-winner-wrapper\">\n        <div className=\"Board-title\">\n        <div className=\"Big-Winner\">\n          <span className=\"neon-orange\">You</span>\n          <span className=\"neon-blue\">Win!!!</span>\n        </div>\n      </div>\n      <img className=\"win-img\" src=\"https://media.giphy.com/media/o75ajIFH0QnQC3nCeD/giphy.gif\" alt=\"the office erin excited Big Win image\"/>\n      <div className=\"play-again-btn-wrapper\">\n      <div onClick={this.handleClick} className=\"play-again-btn\">\n          <span id=\"play-btn\" className=\"neon-orange\">Play</span>\n          <span id=\"play-btn\" className=\"neon-blue play-btn\">Again?</span>\n        </div>\n      </div>\n    </div>\n      )\n    } if (!this.state.gameStarted){\n      return(\n        <div className=\"game-winner-wrapper\">\n        <div className=\"Board-title\">\n        <div className=\"Winner\">\n          <span className=\"neon-orange\">Ready</span>\n          <span className=\"neon-blue\">To Play?</span>\n        </div>\n      </div>\n      <div className=\"play-again-btn-wrapper\">\n      <div onClick={this.handleNew} className=\"play-again-btn\">\n          <span id=\"play-btn\" className=\"neon-orange\">Click</span>\n          <span id=\"play-btn\" className=\"neon-blue play-btn\">Here</span>\n        </div>\n      </div>\n    </div>\n      )\n    } else {\n\n    let tblBoard =  [];\n    for (let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++){\n        let coord = `${y}-${x}`\n        row.push(\n        <Cell \n        key={coord}\n        isLit={this.state.board[y][x]}\n        flipCellsAroundMe={() => this.flipCellsAround(coord)}\n         />);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n    }\n\n    return (\n      \n      <div>\n      <div className=\"Board-title\">\n      <div className=\"neon-orange\">Lights</div>\n      <div className=\"neon-blue\">Out</div>\n      </div>\n          <table className=\"Board\">\n            <tbody>\n              {tblBoard}\n            </tbody>\n          </table>\n          <div className=\"play-again-btn-wrapper\">\n            <div onClick={this.handleClick}>\n                <span id=\"play-btn\" className=\"neon-orange\">New</span>\n                <span id=\"play-btn\" className=\"neon-blue play-btn\">Board?</span>\n            </div>\n        </div>\n\n      <Rules />\n      <Footer />\n      </div>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}