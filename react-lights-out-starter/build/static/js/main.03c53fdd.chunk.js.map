{"version":3,"sources":["Cell.js","Rules.js","Footer.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Rules","src","alt","Footer","href","Board","state","hasWon","board","createBoard","gameStarted","handleNew","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","resetGame","newGame","_this2","st","Audio","play","_this3","_this4","id","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","src_Rules_0","src_Footer_0","defaultProps","App","Helmet","charset","name","property","content","crossorigin","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAsCeA,qBApBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFFA,2EAKPU,GAEVP,KAAKJ,MAAMY,qDAIX,IAAIC,EAAU,QAAUT,KAAKJ,MAAMc,MAAQ,YAAc,IAEzD,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAASM,QAASf,KAAKI,qBAf3BY,cCiBJC,0LA5BP,OACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAEbH,EAAAC,EAAAC,cAAA,OAAKK,IAAI,2DAA2DJ,UAAU,UAAUK,IAAI,kBAE5FR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,2BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,aAEAH,EAAAC,EAAAC,cAAA,OAAKK,IAAI,2DAA2DJ,UAAU,UAAUK,IAAI,iBAC5FR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAtBLE,cCSLI,0LARP,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,gBAAsCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAA8BH,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,6BAAR,kCAJ5EL,cCmCfM,qBAQJ,SAAAA,EAAY1B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACjBzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMJ,KAGD2B,MAAQ,CACXC,QAAQ,EACRC,MAAO5B,EAAK6B,cACZC,aAAa,GAEf9B,EAAKO,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAK+B,UAAY/B,EAAK+B,UAAUvB,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAVAA,6EAkBjB,IAFA,IAAI4B,EAAQ,GAEHI,EAAG,EAAGA,EAAI7B,KAAKJ,MAAMkC,MAAOD,IAAI,CAEvC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIhC,KAAKJ,MAAMqC,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAWpC,KAAKJ,MAAMyC,qBAEtCZ,EAAMS,KAAKH,GAEb,OAAON,0CAKOa,GAAO,IAAAC,EACAvC,KAAKJ,MAArBqC,EADgBM,EAChBN,MAAOH,EADSS,EACTT,MACRL,EAAQzB,KAAKuB,MAAME,MAFFe,EAGRF,EAAMG,MAAM,KAAKC,IAAIC,QAHbC,EAAA9C,OAAA+C,EAAA,EAAA/C,CAAA0C,EAAA,GAGhBX,EAHgBe,EAAA,GAGbZ,EAHaY,EAAA,GAMrB,SAASE,EAASjB,EAAGG,GAGfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCL,EAAMI,GAAGG,IAAMP,EAAMI,GAAGG,IAI5Bc,EAASjB,EAAGG,GACZc,EAASjB,EAAGG,EAAI,GAChBc,EAASjB,EAAGG,EAAI,GAChBc,EAASjB,EAAI,EAAGG,GAChBc,EAASjB,EAAI,EAAGG,GAMhB,IAAIR,EAASC,EAAMsB,MAAM,SAAAhB,GAAG,OAAIA,EAAIgB,MAAM,SAAAC,GAAI,OAAKA,MAEnDhD,KAAKiD,SAAS,CAACxB,QAAOD,iDAItBxB,KAAKkD,gDAKLlD,KAAKmD,4CAKE,IAAAC,EAAApD,KACPA,KAAKiD,SAAS,SAAAI,GAAE,MAAK,CACnB7B,QAAQ,EACRC,MAAO2B,EAAK1B,cACZC,aAAa,KAGH,IAAI2B,MAAM,qBAEVC,2CAOH,IAAAC,EAAAxD,KACTA,KAAKiD,SAAS,SAAAI,GAAE,MAAK,CACnB7B,QAAQ,EACRC,MAAO+B,EAAK9B,cACZC,aAAa,sCAQR,IAAA8B,EAAAzD,KACP,GAAIA,KAAKuB,MAAMC,OACb,OACFb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,OACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,YAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUI,IAAI,6DAA6DC,IAAI,oCAC9FR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACfH,EAAAC,EAAAC,cAAA,OAAKE,QAASf,KAAKI,YAAaU,UAAU,kBACtCH,EAAAC,EAAAC,cAAA,QAAM6C,GAAG,WAAW5C,UAAU,eAA9B,QACAH,EAAAC,EAAAC,cAAA,QAAM6C,GAAG,WAAW5C,UAAU,sBAA9B,aAKJ,GAAKd,KAAKuB,MAAMI,YAiBX,CAGP,IADA,IAAIgC,EAAY,GACP9B,EAAI,EAAGA,EAAI7B,KAAKJ,MAAMkC,MAAOD,IAAI,CAExC,IADA,IAAIE,EAAM,GAD8B6B,EAAA,SAE/B5B,GACP,IAAIM,EAAK,GAAAuB,OAAMhC,EAAN,KAAAgC,OAAW7B,GACpBD,EAAIG,KACJvB,EAAAC,EAAAC,cAACiD,EAAD,CACAC,IAAKzB,EACL5B,MAAO+C,EAAKlC,MAAME,MAAMI,GAAGG,GAC3BxB,kBAAmB,kBAAMiD,EAAKO,gBAAgB1B,QANvCN,EAAI,EAAGA,EAAIhC,KAAKJ,MAAMqC,MAAOD,IAAI4B,EAAjC5B,GAST2B,EAASzB,KAAKvB,EAAAC,EAAAC,cAAA,MAAIkD,IAAKlC,GAAIE,IAG7B,OAEEpB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,QAEIH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aACG8C,IAGLhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKE,QAASf,KAAKI,aACfO,EAAAC,EAAAC,cAAA,QAAM6C,GAAG,WAAW5C,UAAU,eAA9B,OACAH,EAAAC,EAAAC,cAAA,QAAM6C,GAAG,WAAW5C,UAAU,sBAA9B,YAIVH,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACqD,EAAD,OArDA,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,SACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,cAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACfH,EAAAC,EAAAC,cAAA,OAAKE,QAASf,KAAK4B,UAAWd,UAAU,kBACpCH,EAAAC,EAAAC,cAAA,QAAM6C,GAAG,WAAW5C,UAAU,eAA9B,SACAH,EAAAC,EAAAC,cAAA,QAAM6C,GAAG,WAAW5C,UAAU,sBAA9B,kBAzIUE,cAAdM,EAEG6C,aAAe,CACpBrC,MAAO,EACPG,MAAO,EACPI,oBAAqB,KA6LVf,QCrMA8C,0LAxBX,OACEzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KACI1D,EAAAC,EAAAC,cAAA,QAAMyD,QAAQ,UACd3D,EAAAC,EAAAC,cAAA,QAAM0D,KAAK,QAAQC,SAAS,WAAWC,QAAQ,cAC/C9D,EAAAC,EAAAC,cAAA,QAAM0D,KAAK,WAAWE,QAAQ,wCAC9B9D,EAAAC,EAAAC,cAAA,QAAM0D,KAAK,cAAcE,QAAQ,YACjC9D,EAAAC,EAAAC,cAAA,QAAM0D,KAAK,QAAQC,SAAS,WAAWC,QAAQ,2CAC/C9D,EAAAC,EAAAC,cAAA,QAAM0D,KAAK,MAAMC,SAAS,SAASC,QAAQ,gDAC3C9D,EAAAC,EAAAC,cAAA,QAAM0D,KAAK,cAAcC,SAAS,iBAAiBC,QAAQ,iLAC3D9D,EAAAC,EAAAC,cAAA,QAAM0D,KAAK,SAASC,SAAS,YAAYC,QAAQ,mBACjD9D,EAAAC,EAAAC,cAAA,QAAM0D,KAAK,eAAeC,SAAS,kBAAkBC,QAAQ,6BAC7D9D,EAAAC,EAAAC,cAAA,UAAQK,IAAI,4CAA4CwD,YAAY,cACpE/D,EAAAC,EAAAC,cAAA,2BAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAC8D,EAAD,eAnBU3D,cCGE4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.03c53fdd.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React,{ Component } from \"react\";\nimport \"./Rules.css\"\n\n\nclass Rules extends Component{\n    render(){\n        return (\n        <div className=\"rules-wrapper\">\n            <div>\n            <div className=\"arrows\">\n            <i className=\"fas fa-arrow-down\"></i>\n            <i className=\"fas fa-arrow-down\"></i>\n            <i className=\"fas fa-arrow-down\"></i>\n            </div>\n            <img src=\"https://i.gyazo.com/64b960d2e4d5a86840a20fd396a589c5.gif\" className=\"img-gif\" alt=\"tutorial gif\" />\n            </div>\n            <div className=\"rules-wrap2\">\n            <h1 className=\"rules-title\">Rules</h1>\n            <hr className=\"hr-line\"></hr>\n            <h3 className=\"rules-text\">Turn all the lights off</h3>\n            <h3 className=\"rules-text\">Have Fun</h3>\n            </div>\n            <img src=\"https://i.gyazo.com/64b960d2e4d5a86840a20fd396a589c5.gif\" className=\"img-gif\" alt=\"tutorial gif\" />\n            <div className=\"arrows\">\n            <i className=\"fas fa-arrow-up\"></i>\n            <i className=\"fas fa-arrow-up\"></i>\n            <i className=\"fas fa-arrow-up\"></i>\n            </div>\n            \n        </div>\n        )\n    }\n}\n\nexport default Rules;","import React, { Component } from \"react\";\nimport './Footer.css'\n\nclass Footer extends Component {\n    render(){\n        return (\n            <div className=\"footer-div\">\n                <p className=\"copyright\">Crafted by a <i className=\"fas fa-user-ninja fa-2x\"></i><a href=\"http://www.mycodedojo.com\"> Â© 2021 MyCodeDojo</a></p>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","\n\nimport React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport Rules from \"./Rules\"\nimport Footer from \"./Footer\"\n\n\nimport './Board.css';\n\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.35\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n      gameStarted: false,\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNew = this.handleNew.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y= 0; y < this.props.nrows; y++){\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board, hasWon});\n  }\n\n  handleClick(){\n    this.resetGame();\n    \n  }\n\n  handleNew(){\n    this.newGame();\n    \n  }\n\n\n  newGame(){\n    this.setState(st => ({\n      hasWon: false,\n      board: this.createBoard(),\n      gameStarted: true\n\n    }));\n    let audio = new Audio(\"./game-bg-new.mp3\")\n      const start = () => {\n          audio.play()\n        }\n        start();\n  }\n\n  \n\n  resetGame(){\n    this.setState(st => ({\n      hasWon: false,\n      board: this.createBoard(),\n      gameStarted: true\n\n    }));\n  }\n\n  \n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon){\n      return (\n    <div className=\"game-winner-wrapper\">\n        <div className=\"Board-title\">\n        <div className=\"Big-Winner\">\n          <span className=\"neon-orange\">You</span>\n          <span className=\"neon-blue\">Win!!!</span>\n        </div>\n      </div>\n      <img className=\"win-img\" src=\"https://media.giphy.com/media/o75ajIFH0QnQC3nCeD/giphy.gif\" alt=\"the office erin excited Big Win\"/>\n      <div className=\"play-again-btn-wrapper\">\n      <div onClick={this.handleClick} className=\"play-again-btn\">\n          <span id=\"play-btn\" className=\"neon-orange\">Play</span>\n          <span id=\"play-btn\" className=\"neon-blue play-btn\">Again?</span>\n        </div>\n      </div>\n    </div>\n      )\n    } if (!this.state.gameStarted){\n      return(\n        <div className=\"game-winner-wrapper\">\n        <div className=\"Board-title\">\n        <div className=\"Winner\">\n          <span className=\"neon-orange\">Ready</span>\n          <span className=\"neon-blue\">To Play?</span>\n        </div>\n      </div>\n      <div className=\"play-again-btn-wrapper\">\n      <div onClick={this.handleNew} className=\"play-again-btn\">\n          <span id=\"play-btn\" className=\"neon-orange\">Click</span>\n          <span id=\"play-btn\" className=\"neon-blue play-btn\">Here</span>\n        </div>\n      </div>\n    </div>\n      )\n    } else {\n\n    let tblBoard =  [];\n    for (let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++){\n        let coord = `${y}-${x}`\n        row.push(\n        <Cell \n        key={coord}\n        isLit={this.state.board[y][x]}\n        flipCellsAroundMe={() => this.flipCellsAround(coord)}\n         />);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n    }\n\n    return (\n      \n      <div>\n      <div className=\"Board-title\">\n      <div className=\"neon-orange\">Lights</div>\n      <div className=\"neon-blue\">Out</div>\n      </div>\n          <table className=\"Board\">\n            <tbody>\n              {tblBoard}\n            </tbody>\n          </table>\n          <div className=\"play-again-btn-wrapper\">\n            <div onClick={this.handleClick}>\n                <span id=\"play-btn\" className=\"neon-orange\">New</span>\n                <span id=\"play-btn\" className=\"neon-blue play-btn\">Board?</span>\n            </div>\n        </div>\n\n      <Rules />\n      <Footer />\n      </div>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport { Helmet } from 'react-helmet';\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n      <Helmet>\n          <meta charset=\"utf-8\" />\n          <meta name=\"title\" property=\"og:title\" content=\"LightsOut\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <meta name=\"theme-color\" content=\"#000000\" />\n          <meta name=\"image\" property=\"og:image\" content=\"https://i.ibb.co/hCNfQ4x/thumbnail.png\" />\n          <meta name=\"url\" property=\"og:url\" content=\"https://thirsty-goodall-d53ffc.netlify.app/\" />\n          <meta name=\"description\" property=\"og:description\" content=\"LightsOut | A simple click based game that tests your ability to turn off the lights. Click the pattern to inert the current selection. Do you think you have what it takes?\" />\n          <meta name=\"author\" property=\"og:author\" content=\"Michael Cooper\" />\n          <meta name=\"publish_date\" property=\"og:publish_date\" content=\"2021-06-21T00:00:00-0600\" />\n          <script src=\"https://kit.fontawesome.com/8cc1b75eb3.js\" crossorigin=\"anonymous\"></script>\n          <title>LightsOut</title>\n      </Helmet>\n        {/* <audio src=\"./game-bg-new.mp3\" loop autoPlay /> */}\n        <div className=\"game-wrapper\">\n        <Board />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}